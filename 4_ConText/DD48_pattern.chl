//////////////////////////////////////////////////////////////////////////////
//
// TEV DD48 Pattern Compiler Jim Chakuroff, jChakuroff@testevolution.com
// Date:  02/04/13  Added popl, pop, DM, MATCH, crep. Remove nop
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// language name

Language:               DD48 pattern

//////////////////////////////////////////////////////////////////////////////
// put whatever you want here, short description, author name, email address..

Description:            DD48 Pattern  j. Chakuroff jchakuroff@testevolution.com

//////////////////////////////////////////////////////////////////////////////
// default file filter
// note: if more than one extension is associated, eg:
// C/C++ files (*.c,*.cpp,*.h,*.hpp)|*.c;*.cpp;*.h;*.hpp

Filter:                 *.dp,*.h


//////////////////////////////////////////////////////////////////////////////
// help file which will be invoked when F1 is pressed

HelpFile:


//////////////////////////////////////////////////////////////////////////////
// language case sensitivity
//                      0  - no
//                      1  - yes

CaseSensitive:          0


//////////////////////////////////////////////////////////////////////////////
// comment type: LineComment - comment to the EOL
// BlockCommentBeg - block comment begin, it could be
// multiline
// BlockCommentEnd - block comment end
//
// if there is more than one definition of line/beg/end comment string,
// you can separate it with spaces.
// for example, for pascal it would be:
//   LineComment:       //
//   BlockCommentBeg:   (* {
//   BlockCommentEnd:   *) }

LineComment:            ;
BlockCommentBeg:
BlockCommentEnd:


//////////////////////////////////////////////////////////////////////////////
// identifier characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char

IdentifierBegChars:     a..z A..Z _%@.
IdentifierChars:        a..z A..Z _ 0..9 ?

//////////////////////////////////////////////////////////////////////////////
// numeric constants begin characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char
// number always starts with 0..9 except when NumConstBeg
// defines other

//NumConstBegChars:       0..9
NumConstBegChars:       


//////////////////////////////////////////////////////////////////////////////
// numeric constants characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char
// number always starts with 0..9 except when NumConstBeg
// defines other

NumConstChars:          0..9 abcdefhABCDEFH


//////////////////////////////////////////////////////////////////////////////
// escape character

EscapeChar:


//////////////////////////////////////////////////////////////////////////////
// keyword table
// note: delimited with spaces, lines could be wrapped
// you may divide keywords into five groups which can be
// highlighted differently

// (Green)compiler options
KeyWords1:        include define nop

// (Purple) types
KeyWords2:        driveformat compareformat datamode failmask drivermode
                  markermode clockreference clockedges d0 d1 d2 d3 r0 r1 r2 r3 staticdrive
                  pinlist relaymode pinmode pmuset tset_01 staticload comparatormode
                  SEQMode mask CLR_COND SET_COND levelset Warn None Mode_Compat
				  Type Mode Length Width PinGroup WaveType PSet T0 C0

// (Blue) compiler commands
KeyWords3:        .pattern .edgeset .extern .target .pset .tset .levelset .pin .pingroup .driverset
                  .wavetype .wavedata .pmuset

// (blue) types
KeyWords4:        DEF_PSET DEF_PIN DEF_LEVELSET DEF_WAVETYPE DEF_WAVEDATA DEF_PMUSET DEF_PIN DEF_PINGROUP
                  vih vil vt voh vol vch vcl vc iol ioh C1 C2 XCOND AF PF MATCH DM

// (red) [extended] op-codes, formats
KeyWords5:        halt rep rtn lcnt endl jmp cjmp jsr cjsr crtn jmpi jsri cwait rcode lwseg
                  H L M V W I R C starti starte shift nexti nexte stopi stope shiftst store send
                  SerialLSB SerialMSB WaveType Receive Single Dual Normal
                  NRZ NRZC RZ RZC RO ROC RT RTC HI LO OFF CLK CLKC MAN MANC TRIGGER TRIG1 TRIG2 TMUARM
                  strobe window popl pop crep Idle enabled disabled Z Dynamic DrvSense DriveSense
                  Quad Dual SingleDrive SingleCompare
                  Parallel SerialLSB SerialMSB

//////////////////////////////////////////////////////////////////////////////
// string delimiter: StringBegChar - string begin char
// StringEndChar - string end char
// MultilineStrings - enables multiline strings, as perl
// has it

StringBegChar:          "
StringEndChar:          "
MultilineStrings:       0


//////////////////////////////////////////////////////////////////////////////
// use preprocessor: 0 - no
// 1 - yes
// note: if yes, '#' and statements after it will be
// highlighted with Preprocessor defined colors

UsePreprocessor:        0


//////////////////////////////////////////////////////////////////////////////
// highlight line: 0 - no
// 1 - yes
// note: if yes, current line will be highlighted

CurrLineHighlighted:    0


//////////////////////////////////////////////////////////////////////////////
// colors
// note:                first value is foreground, second is background color
//                        and third (optional) represents font attribute:
//                        B - bold
//                        I - italic
//                        U - underline
//                        S - strike out
//                        attributes can be combined: eg. B or BI
//                      as value, it could be used any standard windows color:
//                        clBlack, clMaroon, clGreen, clOlive, clNavy,
//                        clPurple, clTeal, clGray, clSilver, clRed, clLime,
//                        clYellow, clBlue, clFuchsia, clAqua, clLtGray,
//                        clDkGray, clWhite, clScrollBar, clBackground,
//                        clActiveCaption, clInactiveCaption, clMenu, clWindow,
//                        clWindowFrame, clMenuText, clWindowText, clCaptionText,
//                        clActiveBorder, clInactiveBorder, clAppWorkSpace,
//                        clHighlight, clHighlightText, clBtnFace, clBtnShadow,
//                        clGrayText, clBtnText, clInactiveCaptionText,
//                        clBtnHighlight, cl3DDkShadow, cl3DLight, clInfoText,
//                        clInfoBk
//                      as value, it could be used hex numeric constant too:
//                        $BBGGRR - BB: blue, GG: green, RR: red, eg: $FF6A00

SpaceCol:               clWindowText clWindow
Keyword1Col:            clGreen clWindow
Keyword2Col:            clPurple clWindow
Keyword3Col:            clBlue clWindow
Keyword4Col:            clBlue clWindow
Keyword5Col:            clRed clWindow
IdentifierCol:          clWindowText clWindow
CommentCol:             clGray clWindow
NumberCol:              clRed clWindow
StringCol:              clMaroon clWindow
SymbolCol:              clGray clWindow
PreprocessorCol:        clBlue clWindow
SelectionCol:           clWhite clNavy
CurrentLineCol:         clBlack clYellow

OverrideTxtFgColor:     0
BlockAutoindent:        0
BlockBegStr:
BlockEndStr:
//MatchedBracesCol:       clWindowText clWindow
MatchedBracesCol:       clRed clWindow
